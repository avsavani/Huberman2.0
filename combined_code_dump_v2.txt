// File: ./app/layout.tsx
import { Inter as FontSans } from "next/font/google"
import localFont from "next/font/local"
import { cn } from "@/lib/utils"
import { siteConfig } from "@/config/site"

import "@/app/globals.css"

const fontSans = FontSans({
  subsets: ["latin"],
  variable: "--font-sans",
})



interface RootLayoutProps {
  children: React.ReactNode
}

export const metadata = {
  title: {
    default: siteConfig.name,
    template: `%s | ${siteConfig.name}`,
  },
  description: siteConfig.description,
  keywords: [
    "Huberman ai",
    "Andrew Huberman",
    "Huberman GPT",
    "talk to Huberman",
    "Huberman Lab",
    "Huberman Lab podcast",
  ],
  authors: [
    {
      name: "Ashish Savani",
      url: "https://askhuberman.app",
    },
  ],
  creator: "Ashish Savani",
  openGraph: {
    type: "website",
    locale: "en_US",
    url: siteConfig.url,
    title: siteConfig.name,
    description: siteConfig.description,
    siteName: siteConfig.name,
  },
  twitter: {
    card: "summary_large_image",
    title: siteConfig.name,
    description: siteConfig.description,
    images: [`${siteConfig.url}/og.jpg`],
    creator: "@shadcn",
  },
  icons: {
    icon: "/favicon.ico",
    shortcut: "/favicon-16x16.png",
    apple: "/apple-touch-icon.png",
  },
  manifest: `${siteConfig.url}/site.webmanifest`,
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body
        className={cn(
          "h-screen bg-background font-sans antialiased",
          fontSans.variable,
        )}
      >
          {children}
      </body>
    </html>
  )
}


// File: ./app/(landing)/layout.tsx
import { Navbar } from "@/components/Navbar";
import { Footer } from "@/components/Footer";

export default function Layout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
      <div className="bg-background flex flex-col h-screen">
          <Navbar />
          <div className="flex-1 h-screen overflow-y-auto">
            {children}
          </div>
          <Footer />
      </div>
  );
}



// File: ./app/(landing)/page.tsx
'use client';
import React, { useRef, useState, useEffect } from "react";
import { SettingsModal } from '@/components/settings/Settings';
import { SearchBar } from '@/components/searchbar/SearchBar';
import { PassageList } from '@/components/passagelist/PassageList';
import { AnswerSection } from '@/components/answersection/AnswerSection';
import { HLChapter } from "@/types";
import { handleAnswer } from '@/services/answerService';
import { handleSearch } from '@/services/searchService';
import {loadSettings, saveSettings, clearSettings} from '@/services/settingsService';
import { storeQuery } from "@/actions/storeQuery";
import { sendFeedback } from "@/actions/feedback";
import { Button } from "@/components/ui/button";
import { Settings } from "lucide-react";
import { useReducer } from "react";

export default function Home(): JSX.Element {
  const inputRef = useRef<HTMLInputElement>(null);
  const [query, setQuery] = useState<string>("");
  const [chapters, setChapters] = useState<HLChapter[]>([]);
  const [answer, setAnswer] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [showSettings, setShowSettings] = useState<boolean>(false);
  const [mode, setMode] = useState<"search" | "chat">("chat");
  const [matchCount, setMatchCount] = useState<number>(5);
  const [apiKey, setApiKey] = useState<string>("");
  const [selectedChapterIndex, setSelectedChapterIndex] = useState<number|null>(null);
  const [streamComplete, setStreamComplete] = useState(false);
  const [feedbackGiven, setFeedbackGiven] = useState<boolean>(false);
  const [isCopied, setIsCopied] = useState<boolean>(false);
  const [, forceUpdate] = useReducer(x => x + 1, 0);
  
  useEffect(() => {
    if (streamComplete) {
      storeQuery(query, answer).catch(console.error);
      setStreamComplete(false);
    }
  }, [streamComplete, answer, query]);

  useEffect(() => {
    const { PG_KEY, PG_MATCH_COUNT, PG_MODE } = loadSettings();
    if (PG_KEY) setApiKey(PG_KEY);
    if (PG_MATCH_COUNT) setMatchCount(parseInt(PG_MATCH_COUNT));
    if (PG_MODE) setMode(PG_MODE as "search" | "chat");
    inputRef.current?.focus();
  }, []);

  const handleSave = () => {
    if (apiKey.length !== 51) {
      alert("Please enter a valid API key.");
      return;
    }
    saveSettings(apiKey, matchCount, mode);
    setShowSettings(false);
    inputRef.current?.focus();
  };
  const handleClear = () => {
    clearSettings();
    setApiKey("");
    setMatchCount(1);
    setMode("search");
  };

  const onSearch = async () => {
    setAnswer('');
    setChapters([]);
    setLoading(true);

    try {
      console.log("Searching...");
      const results = await handleSearch(apiKey, query, matchCount);
      setChapters(results);
    } catch (error) {
      console.error(error);
      alert('An error occurred while performing the search.');
    } finally {
      setLoading(false);
    }
  };

  const onAnswer = async () => {
    await handleAnswer(apiKey, query, matchCount, setAnswer, setStreamComplete, setLoading, setChapters, forceUpdate)
  };

  return (
    <>
        <div className="flex-1 h-full pb-10">
            <div className="mx-auto flex h-full w-full max-w-[650px] flex-col items-center px-3 pt-4 sm:pt-8"> 
            <Button variant="outline"
                className="cursor-pointer border px-3 py-1 text-sm hover:opacity-60 "
                onClick={() => setShowSettings(!showSettings)}
            >
              <Settings className="mr-2 h-4 w-4" />
              Settings
            </Button>
            <SettingsModal
              showSettings={showSettings} 
              setShowSettings={setShowSettings} 
              mode={mode} 
              setMode={setMode} 
              matchCount={matchCount} 
              setMatchCount={setMatchCount} 
              apiKey={apiKey} 
              setApiKey={setApiKey} 
              handleSave={handleSave} 
              handleClear={handleClear} 
            />
            <SearchBar 
              query={query} 
              setQuery={setQuery} 
              handleSearch={onSearch} // Use the modularized search function
              handleAnswer={onAnswer} 
              mode={mode} 
              inputRef={inputRef} 
            />
            {loading }
            {answer && (
              <AnswerSection 
                answer={answer}
                isCopied={isCopied}
                setIsCopied={setIsCopied}
                feedbackGiven={feedbackGiven}
                handleFeedback={sendFeedback}
                query={query}
              />
            )}
            {!loading && chapters.length > 0 && (
              <PassageList 
                chapters={chapters}
              />
            )}
            {!loading && !answer && chapters.length === 0 && (
              <div className="my-4">No results found.</div>
        )}
      </div>
    </div>
    </>
  );
}


// File: ./components/searchbar/SearchBar.tsx
'use client';
import React, { KeyboardEvent, useRef } from 'react';
import { IconSearch, IconMessage2 } from '@tabler/icons-react';

interface SearchBarProps {
  query: string;
  setQuery: (query: string) => void;
  handleSearch: () => void;
  handleAnswer: () => void;
  mode: 'search' | 'chat';
  inputRef: React.RefObject<HTMLInputElement>;
}

export const SearchBar: React.FC<SearchBarProps> = ({
  query,
  setQuery,
  handleSearch,
  handleAnswer,
  mode,
  inputRef,
}) => {

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
      if (e.key === 'Enter') {
        mode === 'search' ? handleSearch() : handleAnswer();
      }
  };

  return (
    <div className="relative w-full mt-4">
      <IconSearch className="absolute top-1/2 left-3 transform -translate-y-1/2 w-6 h-6 text-gray-400" />
      <input
        ref={inputRef}
        className="appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 pl-10 pr-12 leading-tight focus:outline-none focus:bg-white focus:border-gray-500 sm:mt-0 sm:pl-10 sm:pr-16"
        type="text"
        placeholder="How can one improve sleep quality?"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        onKeyDown={handleKeyDown}
      />
      <button className="absolute top-1/2 right-2 transform -translate-y-1/2" onClick={mode === 'search' ? handleSearch : handleAnswer}>
        <IconMessage2
          className="h-5 w-5 hover:cursor-pointer sm:h-8 sm:w-8 text-gray-500"
        />
      </button>
    </div>
  );
};


// File: ./components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



// File: ./components/ui/label.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



// File: ./components/ui/accordion.tsx
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-1 font-medium transition-all [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("p-6 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



// File: ./components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



// File: ./components/ui/select.tsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



// File: ./components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



// File: ./components/Navbar.tsx
'use client';

import { IconExternalLink } from "@tabler/icons-react";
import { FC } from "react";

export const Navbar: FC = () => {
    return (
        <div className="flex h-[60px] border-b border-gray-100 py-2 px-4 sm:px-8 items-center justify-between bg-gray-900 text-gray-300">
            <div className="font-bold text-2xl flex items-center">
                <a
                    className="hover:opacity-70 transition ease-in-out duration-150"
                    href="https://hubermangpt.vercel.app"
                >
                    Huberman GPT
                </a>
            </div>
            <div className="flex items-center space-x-4">
                <a
                    className="flex items-center hover:opacity-70 transition ease-in-out duration-150"
                    href="https://hubermanlab.com/"
                    target="_blank"
                    rel="noreferrer"
                >
                    <div className="hidden sm:block">HubermanLab.com</div>
                    <IconExternalLink
                        className="ml-1"
                        size={20}
                    />
                </a>
            </div>
        </div>
    );
};



// File: ./components/settings/Settings.tsx
'use client';

import * as React from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface SettingsModalProps {
  showSettings: boolean;
  setShowSettings: (show: boolean) => void;
  mode: 'search' | 'chat';
  setMode: (mode: 'search' | 'chat') => void;
  matchCount: number;
  setMatchCount: (count: number) => void;
  apiKey: string;
  setApiKey: (key: string) => void;
  handleSave: () => void;
  handleClear: () => void;
}

export const SettingsModal: React.FC<SettingsModalProps> = ({
  showSettings,
  setShowSettings,
  mode,
  setMode,
  matchCount,
  setMatchCount,
  apiKey,
  setApiKey,
  handleSave,
  handleClear,
}) => {
  // Debugging: Check if the component is being rendered
  // console.log("SettingsModal rendering, showSettings:", showSettings);

  if (!showSettings) return null;

  return (
    <div className="p-4">
      <Card className="w-[400px]">
        <CardHeader>
          <CardTitle>Settings</CardTitle>
        </CardHeader>
        <CardContent>
            <div className="grid w-full gap-4">
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="mode-select">Mode</Label>
                <Select value={mode} onValueChange={setMode} defaultValue="chat">
                  <SelectTrigger id="mode-select">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                      <SelectItem value="search">Search</SelectItem>
                      <SelectItem value="chat">Chat</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="match-count">Results Count</Label>
                <Input
                  id="match-count"
                  type="number"
                  min={1}
                  max={10}
                  value={matchCount.toString()}
                  onChange={(e) => setMatchCount(Number(e.target.value))}
                />
              </div>
              <div className="flex flex-col space-y-1.5">
                <Label htmlFor="api-key">API Key</Label>
                <Input
                  id="api-key"
                  type="password"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                />
              </div>
            </div>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button onClick={handleSave}>Save</Button>
          <Button onClick={handleClear} variant="destructive">Clear</Button>
        </CardFooter>
      </Card>
    </div>
  );
};




// File: ./components/Answer/Answer.tsx
'use client';
import React, { useEffect, useState } from "react";
import styles from "./answer.module.css";

interface AnswerProps {
  text: string;
}

export const Answer: React.FC<AnswerProps> = ({ text }) => {
  const [words, setWords] = useState<string[]>([]);

  useEffect(() => {
    setWords(text.split(" "));
    console.log(text);
  }, [text]);

  return (
    <div>
      {words.map((word, index) => (
        <span
          key={index}
          className={styles.fadeIn}
          style={{ animationDelay: `${index * 0.01}s` }}
        >
          {word}{" "}
        </span>
      ))}
    </div>
  );
};



// File: ./components/passagelist/PassageList.tsx
import React, { useState } from 'react';
import { HLChapter, HLSegment } from "@/types";
import Image from 'next/image';
import { IconExternalLink } from "@tabler/icons-react";
import { Card, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

interface PassageListProps {
  chapters: HLChapter[];
}

const formatSegment = (segment: HLSegment, index: number, speaker: string) => (
  <React.Fragment key={index}>
    <strong>{segment.speaker === "SPEAKER_01" ? speaker : "Dr. Huberman"}</strong>: {segment.segment} <br /><br />
  </React.Fragment>
);

const formatChapterUI = (chapter: HLChapter, speaker: string) => (
  <>
    {chapter.conversation.map((segment, i) => formatSegment(segment, i, speaker))}
  </>
);

export const PassageList: React.FC<PassageListProps> = ({ chapters }) => {
  return (
    <div className="mt-6 mb-16">
      <div className="font-bold text-2xl">Passages</div>
      {chapters.map((chapter, index) => (
        <Card key={index} className="mt-4 border border-zinc-600 rounded-lg p-1 cursor-pointer transition-all duration-500">

          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value={`chapter-${index}`}>
              <AccordionTrigger>
              <CardHeader className="flex justify-between items-left flex-grow">
            <div className="flex">
              <a href={`https://www.youtube.com/watch?v=${chapter.video_id}&t=${Math.round(parseFloat(chapter.start_time))}s`}
                 target="_blank" rel="noreferrer">
                <Image src={`https://i.ytimg.com/vi/${chapter.video_id}/hqdefault.jpg`} 
                       alt="Video thumbnail" width={128} height={72} className="object-cover rounded-lg mr-4" />
              </a>
              <CardTitle className='px-3'>{chapter.chapter_title}</CardTitle>
              <div className='flex-grow flex justify-end'>
                <a className="hover:opacity-50"
                href={`https://www.youtube.com/watch?v=${chapter.video_id}&t=${Math.round(parseFloat(chapter.start_time))}s`}
                target="_blank" rel="noreferrer">
                <IconExternalLink />
                </a>
              </div>
            </div>
          </CardHeader>
              </AccordionTrigger>
              <AccordionContent>
                {formatChapterUI(chapter, chapter.video_title.split(':')[0].split('：')[0])}
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </Card>
      ))}
    </div>
  );
};  


// File: ./components/passageitem/PassageItem.tsx
'use client';
import React from 'react';
import { HLChapter } from '@/types';

interface PassageItemProps {
  chapter: HLChapter;
  index: number;
  isSelected: boolean;
  onClick: () => void;
}

export const PassageItem: React.FC<PassageItemProps> = ({
  chapter,
  index,
  isSelected,
  onClick,
}) => {
  return (
    <div
      className={`p-4 mb-4 border rounded-md hover:bg-gray-100 cursor-pointer ${
        isSelected ? 'bg-blue-100' : ''
      }`}
      onClick={onClick}
    >
      <div className="font-bold text-xl mb-2">Passage {index + 1}</div>
      <div
        className="text-gray-700"
        dangerouslySetInnerHTML={{ __html: chapter.conversation }}
      />
    </div>
  );
};


// File: ./components/Footer.tsx
'use client';

import { IconBrandGithub, IconBrandTwitter } from "@tabler/icons-react";
import Image from "next/image";
import { FC } from "react";

export const Footer: FC = () => {
  return (
      <div className="flex h-[50px] border-t border-gray-300 py-2 px-8 items-center sm:justify-between justify-center">
        <div className="hidden sm:flex"></div>

        <div className="hidden sm:flex italic text-sm">
          Created by
          <a
              className="hover:opacity-50 mx-1"
              href="https://twitter.com/ashishsavani1"
              target="_blank"
              rel="noreferrer"
          >
            <b>Ashish Savani</b>
          </a>
          , based on the HubermanLab podcast transcript
          <a
              className="hover:opacity-50 ml-1"
              href="https://twitter.com/hubermanlab"
              target="_blank"
              rel="noreferrer"
          >
            Dr. Andrew Huberman
          </a>
          .
        </div>

        <div className="flex space-x-4">
          <a
              className="flex items-center hover:opacity-50"
              href="https://twitter.com/ashishsavani1"
              target="_blank"
              rel="noreferrer"
          >
            <IconBrandTwitter size={24} />
          </a>

          <a
              className="flex items-center hover:opacity-50"
              href="https://github.com/avsavani/HubermanGPT"
              target="_blank"
              rel="noreferrer"
          >
            <IconBrandGithub size={24} />
          </a>

          {/* Buy Me a Coffee Button */}
          <a
              className="flex items-center hover:opacity-50"
              href="https://www.buymeacoffee.com/avsavani"
              target="_blank"
              rel="noreferrer"
          >
            {/* Small square logo for mobile */}
            <div className="sm:hidden">
              <Image src="/bmc-logo.svg" width={18} height={20} alt="Buy Me a Coffee Logo" />
            </div>

            {/* 1/5th button size for larger screens */}
            <div className="hidden sm:block">
              <Image src="/bmc-button.svg" width={100} height={30} alt="Buy Me a Coffee Button" />
            </div>
          </a>
        </div>
      </div>
  );
};



// File: ./components/answersection/AnswerSection.tsx
'use client';

import React from 'react';
import { IconThumbUpFilled, IconThumbDownFilled, IconClipboard } from '@tabler/icons-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface AnswerSectionProps {
  answer: string;
  isCopied: boolean;
  setIsCopied: React.Dispatch<React.SetStateAction<boolean>>;
  feedbackGiven: boolean;
  handleFeedback: (feedback: boolean, query: string, answer: string) => void;
  query: string;
}

export const AnswerSection: React.FC<AnswerSectionProps> = ({
  answer,
  isCopied,
  setIsCopied,
  feedbackGiven,
  handleFeedback,
  query,
}) => {
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(answer);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000); // Reset after 2 seconds
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  return (
    <div className="mt-6 text-left"> {/* Ensure text alignment is set to left */}
      <div className="font-bold text-2xl mb-2 min-w-[650px]">Answer</div>
      <div className="prose">
        <ReactMarkdown remarkPlugins={[remarkGfm]}>{answer}</ReactMarkdown>
      </div>
      <div className="flex justify-between items-center py-5">
        <div>
          {!feedbackGiven && (
            <div className="flex space-x-4">
              <button
                className="rounded-full bg-green-500 p-2 text-white hover:bg-green-600"
                onClick={() => handleFeedback(true, query, answer)}
                aria-label="Thumbs up"
              >
                <IconThumbUpFilled />
              </button>
              <button
                className="rounded-full bg-red-500 p-2 text-white hover:bg-red-600"
                onClick={() => handleFeedback(false, query, answer)}
                aria-label="Thumbs down"
              >
                <IconThumbDownFilled />
              </button>
            </div>
          )}
        </div>
        <button
          onClick={handleCopy}
          className={`h-8 w-8 ${isCopied ? 'text-green-500' : 'text-blue-500'} hover:cursor-pointer`}
          aria-label="Copy"
        >
          <IconClipboard />
        </button>
      </div>
    </div>
  );
};


// File: ./next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: ['i.ytimg.com'],
  },
  reactStrictMode: true,
  env: {
    OPENAI_API_KEY: process.env.OPENAI_API_KEY,
  },
}

module.exports = nextConfig



// File: ./postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



// File: ./app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


// File: ./components/Answer/answer.module.css
.fadeIn {
  animation: fadeIn 0.5s ease-in-out forwards;
  opacity: 0;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}



// File: ./components/Footer.css
/* Assuming you have a CSS file where you can add these */
.navbar {
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000; /* high z-index to keep it above other content */
  }
  
  .footer {
    position: fixed;
    bottom: 0;
    width: 100%;
    z-index: 1000;
  }


// File: ./components/answersection/AnswerSection.module.css
.fadeIn {
    animation: fadeIn 0.5s ease-in-out forwards;
    opacity: 0;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  


